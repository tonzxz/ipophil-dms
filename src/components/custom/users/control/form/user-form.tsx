// src\components\custom\users\control\form\user-form.tsx
import { useEffect, useState } from 'react'
// import { useSession } from 'next-auth/react'
import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'
import { AgencyOptions } from './agency-options'
import { DialogClose } from '@/components/ui/dialog'
import { useAgencies } from '@/lib/services/agencies'
import { zodResolver } from '@hookform/resolvers/zod'
import { User, userRoleEnum } from '@/lib/dms/schema'
import { Controller, useForm } from 'react-hook-form'
import { AutoGeneratedFields } from './auto-generated-fields'
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form'
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select'
import { CreateUserData, createUserSchema, updateUserSchema, UpdateUserData } from '@/lib/validations/user/create'
// import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'

const ROLE_OPTIONS = Object.values(userRoleEnum.enum)

interface BaseUserFormProps {
    onCloseAction: () => void
}

interface CreateUserFormProps extends BaseUserFormProps {
    mode: 'create'
    user?: never
    onSubmit: (data: CreateUserData) => Promise<void>
}

interface EditUserFormProps extends BaseUserFormProps {
    mode: 'edit'
    user: User
    onSubmit: (data: UpdateUserData) => Promise<void>
}

type UserFormProps = CreateUserFormProps | EditUserFormProps

export const UserForm: React.FC<UserFormProps> = ({
    user,
    onSubmit,
    onCloseAction,
    mode
}) => {
    // const { data: session } = useSession()
    const { agencies, isLoading, error } = useAgencies()
    const [avatarPreview, setAvatarPreview] = useState<string | null>(null)

    const form = useForm<CreateUserData | UpdateUserData>({
        resolver: zodResolver(mode === 'create' ? createUserSchema : updateUserSchema),
        defaultValues: {
            first_name: user?.first_name ?? '',
            last_name: user?.last_name ?? '',
            middle_name: user?.middle_name ?? '',
            email: user?.email ?? '',
            agency_id: user?.agency_id ?? '',
            role: user?.role ?? userRoleEnum.enum.user,
            title: user?.title ?? '',
            type: user?.type ?? '',
            password: '',
            active: user?.active ?? true,
            user_name: user?.user_name ?? '',
        }
    })

    useEffect(() => {
        if (mode === 'edit' && user) {

            // Populate the form fields with the user data
            form.reset({
                first_name: user.first_name,
                last_name: user.last_name,
                middle_name: user.middle_name,
                email: user.email,
                agency_id: user.agency_id ?? '',
                role: user.role,
                title: user.title ?? '',
                type: user.type ?? '',
                active: user.active,
                user_name: user.user_name ?? '',

                // Note: Password is not pre-filled for security reasons

            })

            // Set avatar preview if user has an avatar
            if (user.avatar) {
                setAvatarPreview(user.avatar)
            }
        }
    }, [mode, user, form])

    const handleFormSubmit = async (formData: CreateUserData | UpdateUserData) => {
        try {

            // Ensure agency_id is not undefined
            if (!formData.agency_id) {
                throw new Error("Agency ID is required")
            }

            if (mode === 'edit') {
                // Filter out empty fields in edit mode
                const filteredData = Object.fromEntries(
                    Object.entries(formData).filter(([value]) =>
                        value !== undefined &&
                        value !== '' &&
                        value !== null
                    )
                ) as UpdateUserData

                await onSubmit(filteredData)
            } else {
                await onSubmit(formData as CreateUserData)
            }
        } catch (error) {
            // Error handling is now done in the dialog components
            console.error('Error submitting form:', error)
            throw error
        }
    }

    // const handleAvatarChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    //     const file = event.target.files?.[0]
    //     if (file) {
    //         form.setValue('avatar', file)
    //         const url = URL.createObjectURL(file)
    //         setAvatarPreview(url)

    //         if (avatarPreview) {
    //             URL.revokeObjectURL(avatarPreview)
    //         }
    //     }
    // }

    useEffect(() => {
        return () => {
            if (avatarPreview) {
                URL.revokeObjectURL(avatarPreview)
            }
        }
    }, [avatarPreview])

    return (
        <div className="max-h-[80vh] overflow-y-auto p-4">
            <Form {...form}>
                <form onSubmit={form.handleSubmit(handleFormSubmit)} className="flex flex-col space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                        <FormField
                            control={form.control}
                            name="first_name"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>First Name *</FormLabel>
                                    <FormControl>
                                        <Input {...field} placeholder="Enter first name" />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="last_name"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Last Name *</FormLabel>
                                    <FormControl>
                                        <Input {...field} placeholder="Enter last name" />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>

                    <FormField
                        control={form.control}
                        name="middle_name"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Middle Name</FormLabel>
                                <FormControl>
                                    <Input {...field} value={field.value ?? ''} placeholder="Enter middle name (optional)" />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {mode === 'edit' && (
                        <FormField
                            control={form.control}
                            name="user_name"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Username</FormLabel>
                                    <FormControl>
                                        <Input {...field} value={field.value ?? ''} placeholder="Enter username" />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    )}

                    <FormField
                        control={form.control}
                        name="email"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Email *</FormLabel>
                                <FormControl>
                                    <Input {...field} type="email" disabled={mode !== 'create'} placeholder="Enter email address" />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    <div>
                        <Label>Bureau/Office/Unit *</Label>
                        <Controller
                            name="agency_id"
                            control={form.control}
                            render={({ field }) => (
                                <Select onValueChange={field.onChange} value={field.value}>
                                    <SelectTrigger className="w-full">
                                        <SelectValue placeholder={isLoading ? 'Loading...' : 'Select'} />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <AgencyOptions agencies={agencies} isLoading={isLoading} error={error} />
                                    </SelectContent>
                                </Select>
                            )}
                        />
                        {form.formState.errors.agency_id && (
                            <p className="text-red-500 text-sm">{form.formState.errors.agency_id.message}</p>
                        )}
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <Label>Role *</Label>
                            <Controller
                                name="role"
                                control={form.control}
                                render={({ field }) => (
                                    <Select onValueChange={field.onChange} value={field.value}>
                                        <SelectTrigger className="w-full">
                                            <SelectValue placeholder="Select a role" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {ROLE_OPTIONS.map((role) => (
                                                <SelectItem key={role} value={role}>
                                                    {role.charAt(0).toUpperCase() + role.slice(1)}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                )}
                            />
                            {form.formState.errors.role && (
                                <p className="text-red-500 text-sm">{form.formState.errors.role.message}</p>
                            )}
                        </div>

                        <FormField
                            control={form.control}
                            name="title"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Job Title *</FormLabel>
                                    <FormControl>
                                        <Input {...field} placeholder="Enter job title" />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>

                    <FormField
                        control={form.control}
                        name="type"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Job Type *</FormLabel>
                                <FormControl>
                                    <Input {...field} placeholder="Enter job type" />
                                </FormControl>
                                <FormMessage />
                            </FormItem>
                        )}
                    />

                    {mode === 'create' && (
                        <FormField
                            control={form.control}
                            name="password"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Password *</FormLabel>
                                    <FormControl>
                                        <Input
                                            {...field}
                                            type="password"
                                            placeholder="Enter password"
                                            value={field.value ?? undefined}
                                        />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    )}

                    {/* <div className="space-y-2">
                        <Label htmlFor="avatar">Profile Picture</Label>
                        <div className="flex items-center gap-4">
                            <Avatar className="w-16 h-16">
                                {avatarPreview ? (
                                    <AvatarImage src={avatarPreview} alt="Avatar preview" />
                                ) : (
                                    <AvatarFallback>
                                        {`${session?.user?.first_name?.charAt(0) ?? ''}${session?.user?.last_name?.charAt(0) ?? ''}`.trim()}
                                    </AvatarFallback>
                                )}
                            </Avatar>
                            <div className="flex-1">
                                <Input
                                    id="avatar"
                                    type="file"
                                    accept="image/jpeg,image/png,image/webp"
                                    onChange={handleAvatarChange}
                                    className="w-full"
                                />
                                <p className="text-xs text-gray-500 mt-1">
                                    Supported formats: JPEG, PNG, WebP. Max size: 5MB
                                </p>
                                {form.formState.errors.avatar && (
                                    <p className="text-red-500 text-sm mt-1">
                                        {form.formState.errors.avatar.message}
                                    </p>
                                )}
                            </div>
                        </div>
                    </div> */}

                    <AutoGeneratedFields mode={mode} />

                    <div className="flex justify-end space-x-2">
                        <Button type="submit" variant="default">
                            {mode === 'create' ? 'Create User' : 'Save Changes'}
                        </Button>
                        <DialogClose asChild>
                            <Button variant="secondary" onClick={onCloseAction}>
                                Cancel
                            </Button>
                        </DialogClose>
                    </div>
                </form>
            </Form>
        </div>
    )
}